// ==UserScript==
// @name         Kirka.io Super Mod Menu
// @namespace    http://your.namespace/kirka-mod-menu
// @version      1.0
// @description  Super mod menu for Kirka.io
// @author       NexusFusion
// @match        https://kirka.io/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Styles for the mod menu
    const modMenuStyles = `
        #modMenu {
            position: fixed;
            top: 50px;
            left: 50px;
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            font-family: Arial, sans-serif;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
            z-index: 9999;
            cursor: move;
            transition: opacity 0.3s ease-in-out; /* Added transition for smooth hiding */
        }
        #modMenu h2 {
            font-size: 20px;
            margin-bottom: 10px;
            border-bottom: 1px solid white;
            padding-bottom: 5px;
            cursor: default;
        }
        .modOption {
            margin-bottom: 10px;
        }
        .modOption label {
            display: block;
            cursor: pointer;
        }
        .modOption input[type="checkbox"] {
            margin-right: 5px;
        }
        #miniMap {
            position: fixed;
            top: 20px;
            left: 20px;
            width: 200px;
            height: 200px;
            background-color: rgba(0, 0, 0, 0.5);
            border: 2px solid #fff;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
            z-index: 9998;
        }
        #playerMarker {
            position: absolute;
            width: 10px;
            height: 10px;
            background-color: red;
            border-radius: 50%;
            transition: all 0.3s ease-in-out;
        }
    `;

    // Inject styles
    const styleElement = document.createElement('style');
    styleElement.textContent = modMenuStyles;
    document.head.appendChild(styleElement);

    // Create and inject the mod menu HTML
    const modMenuHTML = `
        <div id="modMenu">
            <h2>Kirka.io Super Mod Menu</h2>
            <div class="modOption">
                <label><input type="checkbox" id="godModeCheckbox"> Enable God Mode</label>
            </div>
            <div class="modOption">
                <label><input type="checkbox" id="unlimitedAmmoCheckbox"> Unlimited Ammo</label>
            </div>
            <div class="modOption">
                <label><input type="checkbox" id="superSpeedCheckbox"> Super Speed</label>
            </div>
            <div class="modOption">
                <label><input type="checkbox" id="invisibleCheckbox"> Become Invisible</label>
            </div>
            <div class="modOption">
                <label><input type="checkbox" id="teleportCheckbox"> Teleport</label>
            </div>
            <div class="modOption">
                <label><input type="checkbox" id="minimapCheckbox"> Show Minimap</label>
            </div>
        </div>
    `;
    document.body.insertAdjacentHTML('beforeend', modMenuHTML);

    // Create and inject the minimap HTML
    const miniMapHTML = `
        <div id="miniMap">
            <div id="playerMarker"></div>
        </div>
    `;
    document.body.insertAdjacentHTML('beforeend', miniMapHTML);

    // Mod menu functionality
    const godModeCheckbox = document.getElementById('godModeCheckbox');
    const unlimitedAmmoCheckbox = document.getElementById('unlimitedAmmoCheckbox');
    const superSpeedCheckbox = document.getElementById('superSpeedCheckbox');
    const invisibleCheckbox = document.getElementById('invisibleCheckbox');
    const teleportCheckbox = document.getElementById('teleportCheckbox');
    const minimapCheckbox = document.getElementById('minimapCheckbox');
    const modMenu = document.getElementById('modMenu'); // Get mod menu element
    const miniMap = document.getElementById('miniMap'); // Get minimap element
    const playerMarker = document.getElementById('playerMarker'); // Get player marker element
    let menuVisible = true; // Initially, the menu is visible
    let minimapVisible = true; // Initially, the minimap is visible

    godModeCheckbox.addEventListener('change', function() {
        // Implement god mode functionality
    });

    unlimitedAmmoCheckbox.addEventListener('change', function() {
        // Implement unlimited ammo functionality
        if (unlimitedAmmoCheckbox.checked) {
            window.Player.prototype.weapon.ammo.max = Infinity;
        } else {
            window.Player.prototype.weapon.ammo.max = 10;
        }
    });

    superSpeedCheckbox.addEventListener('change', function() {
        // Implement super speed functionality
    });

    invisibleCheckbox.addEventListener('change', function() {
        // Implement invisibility functionality
        const player = document.getElementById('player');
        if (invisibleCheckbox.checked) {
            player.style.visibility = 'hidden';
        } else {
            player.style.visibility = 'visible';
        }
    });

    teleportCheckbox.addEventListener('change', function() {
        // Implement teleport functionality
    });

    minimapCheckbox.addEventListener('change', function() {
        // Toggle minimap visibility
        if (minimapCheckbox.checked) {
            miniMap.style.display = 'block';
            minimapVisible = true;
        } else {
            miniMap.style.display = 'none';
            minimapVisible = false;
        }
    });

    // Make the mod menu draggable
    let offsetX, offsetY;

    modMenu.addEventListener('mousedown', startDrag);

    function startDrag(e) {
        e.preventDefault();
        offsetX = e.clientX - modMenu.getBoundingClientRect().left;
        offsetY = e.clientY - modMenu.getBoundingClientRect().top;
        document.addEventListener('mousemove', dragMenu);
        document.addEventListener('mouseup', stopDrag);
    }

    function dragMenu(e) {
        modMenu.style.left = e.clientX - offsetX + 'px';
        modMenu.style.top = e.clientY - offsetY + 'px';
    }

    function stopDrag() {
        document.removeEventListener('mousemove', dragMenu);
        document.removeEventListener('mouseup', stopDrag);
    }

    // Toggle mod menu visibility when '/' key is pressed
    document.addEventListener('keydown', function(event) {
        if (event.key === '/') {
            if (menuVisible) {
                modMenu.style.opacity = 0;
                menuVisible = false;
            } else {
                modMenu.style.opacity = 1;
                menuVisible = true;
            }
        }
    });

    // Update minimap position
    function updateMiniMapPosition() {
        const rect = miniMap.getBoundingClientRect();
        const playerRect = document.getElementById('rect');
        const miniMapWidth = rect.width;
        const miniMapHeight = rect.height;
        const playerX = playerRect.x / window.innerWidth * miniMapWidth;
        const playerY = playerRect.y / window.innerHeight * miniMapHeight;

        playerMarker.style.left = playerX + 'px';
        playerMarker.style.top = playerY + 'px';
    }

    // Update minimap position on window resize
    window.addEventListener('resize', updateMiniMapPosition);

    // Update minimap position periodically
    setInterval(updateMiniMapPosition, 1000);

    // Initial update of minimap position
    updateMiniMapPosition();

})();
